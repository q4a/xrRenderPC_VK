@startuml

interface pureFrame {
    +OnFrame()
}

interface IRender_Sector

interface IRender {
    +CFrustum: ViewBase
    +CFrustum: View

    -- Loading / Unloading --
    +create()
    +destroy()
    +reset_begin()
    +reset_end()
    +level_Load()
    +level_Unload()
    -- Information --
    +get_generation()
    +is_sun_static()
    +get_dx_level()
    +DumpStatistics()
    -- Shaders --
    +shader_option_skinning()
    +shader_compile()
    +getShaderPath()
    -- Device state --
    +GetDeviceState()
    +GetForceGPU_REF()
    +GetCacheStatPolys()
    +Begin()
    +Clear()
    +End()
    +ClearTarget()
    +SetCacheXform()
    +OnAssetsChanged()
}


interface IRenderTarget {
    +set_blur()
    +set_gray()
    +set_duality_h()
    +set_duality_v()
    +set_noise()
    +set_noise_scale()
    +set_color_base()
    +set_color_gray()
    +set_color_add()
    +get_width()
    +get_height()
    +set_cm_imfluence()
    +set_cm_interpolate()
    +set_cm_textures()
}

class CResourceManager

pureFrame <|.. D3DXRenderBase
IRender <|.. D3DXRenderBase

class CGammaControl {

}

D3DXRenderBase "1" *-- CGammaControl

class RenderStatistics {

}

D3DXRenderBase "1" *-- RenderStatistics

class CRender {
}

D3DXRenderBase <|-- CRender : < extends
D3DXRenderBase "1" *-- CResourceManager

class CRenderTarget {
    +Begin()
    +End()
    +DoAsyncScreenshot()
    -Create()
    -NeedColorMapping()
    -Available()
    -Perform()
    -calc_tc_noise()
    -calc_tc_duality_ss()
    -phase_distortion()
    +pTempZB
    +pFB
    -RT
    -RT_color_map
    -RT_distort
    -ref_shader: s_postprocess[2]
    -ref_shader: s_postprocess_D
    -ref_geom: g_posprocess
}
CRenderTarget <|.. IRenderTarget

CRender "1" *-- CRenderTarget

class ColorMapManager {
    +SetTextures()
    -UpdateTexture()
    -ref_texture: m_CMap[2]
    -map_Tex: m_TexCache
}

CRenderTarget "1" *-- ColorMapManager

class CModelPool {

}

CRender "1" *-- CModelPool

class CLightR_Manager {
    +add()
    +render()
    +render_point()
    +render_spot()
    -xrXRC: xrc
    -vector<light>: selected_point
    -vector<light>: selected_spot
}

CRender "1" *-- CLightR_Manager

class CSector {
}
CRender "1" *-- CSector
IRender_Sector <|-- CSector

@enduml
